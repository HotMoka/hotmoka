Installation
============

In order to run the experiments of the WTSC 2021 conference paper,
you need a machine with a Java JDK distribution (at least Java~11),
Maven (for building the Java project) and Tendermint version $0.32.11$.
The latter can be downloaded in executable form for the specific
architecture from

https://github.com/tendermint/tendermint/releases/tag/v0.32.11

The tendermint executable must be put in the command-path:
it is important that, by invoking

tendermint version

in a shell, the answer be something like

0.32.11-d85e2e52

To run the tests, you can clone the Tendermint application with:

git clone --branch wtsc21 https://github.com/HotMoka/hotmoka.git

then move inside the repository and build the application:

cd hotmoka
mvn clean install -DskipTests

The compilation should succeed.

Running the C1 test
===================

Open a shell, go inside the hotmoka repository and run a script that starts
a single node local blockchain at localhost (the following Java invocation is a single line;
if a Windows machine is used, replace the colon, in the module path, with a semicolon;
the same holds in subsequent invocations of java in this document):

cd hotmoka
java --module-path modules/explicit:modules/automatic --class-path "modules/unnamed/*" --module io.hotmoka.runs/io.hotmoka.runs.InitNetworkServiceWithEmptyTendermintNode

Open another shell, go inside the hotmoka repository and run a script
that sends, to the blockchain at localhost, a request to install a jar
containing C1 (again, the Java invocation is a single line):

cd hotmoka
java --module-path modules/explicit:modules/automatic --class-path "modules/unnamed/*" --module io.hotmoka.runs/io.hotmoka.runs.InstallC1

On-chain verification will pass and the installation will succeed:

Connecting to the blockchain node at localhost:8080... done
Installing the Takamaka runtime in the node... done
Installing C1 in the node... done (on-chain verification succeeded)
C1.jar installed at address ee848b5bc7fd8283ab01b5977970e71f548...

(the actual address will change at each run).
Close both shells, to ensure that Tendermint is not running anymore.
The local blockchain will be turned off.

Running the C2 test
===================

Perform the same steps as for C1 case above, but this time call script
io.hotmoka.runs.InstallC2 instead. The attempt to install the code in blockchain
will fail since on-chain verification fails:

Connecting to the blockchain node at localhost:8080... done
Installing the Takamaka runtime in the node... done
Installing C2 in the node...
Exception in thread "main" io.hotmoka.beans.TransactionException:
io.takamaka.code.verification.VerificationException: C2.java:8
caller() can only be used inside a @FromContract method or constructor

Running the C3 test
===================

Perform the same steps as for the C1 case above, but this time call script
io.hotmoka.runs.InstallC3 instead. The attempt to install
the code in blockchain will fail since on-chain verification fails:

Connecting to the blockchain node at localhost:8080... done
Installing the Takamaka runtime in the node... done
Installing C3 in the node...
Exception in thread "main" io.hotmoka.beans.TransactionException:
io.takamaka.code.verification.VerificationException: C3.java:14
caller() can only be called on "this"

Testing scalability
===================

You can run the scalability test as follows:

cd io-hotmoka-tests
mvn -Dtest=io.hotmoka.tests.WTSC2021 test

The output should be something like:

running with on-chain verification
iteration 1/10 complete, the richest is 7d918604e0204e91b60fa0cadfefd0acbb407446d2e2c21da3910b6e37a95023#d8
iteration 2/10 complete, the richest is 834b1905003dd355669e8fcbbb988918231aa5a29afc39410bc3551ae8132466#20e
iteration 3/10 complete, the richest is a3826ba81d7470bd3fa3462ac4db6e9b91bfef1a0eba9e65ede6cdab39467c3f#16
iteration 4/10 complete, the richest is 69079a2c6c331bed44c3a2878c91748c4c1db72aea4f3ae41c6dcf25cf25874d#10e
iteration 5/10 complete, the richest is f05fa7ba14fba7476ea9977844fc25ea2849116dc68a58dd9958ca2ca10654f3#1bc
iteration 6/10 complete, the richest is 1ad35a4e7593accaf732a6182cf567b586581eb9f601136cee9d430fd1e9fb06#5e
iteration 7/10 complete, the richest is e43b585304b93d28e76d33328a23e3a9633bc8d98879687a87357c926035c84a#288
iteration 8/10 complete, the richest is 6b013094e813fdd3d561a787871f97f40232ac0bb8af8ff7a6ea255877192599#1c6
iteration 9/10 complete, the richest is 99971df876f2ee14b06ba949f67cb397945f110564863c897bde1d1e8fb9f15e#370
iteration 10/10 complete, the richest is 940eca01785e0d2ea41b2383219a71c8d0d9961708de5475aafd717bc9f8d539#286
10000 money transfers, 10020 transactions in 159384 ms [62 tx/s]

In order to run the same test without on-chain verification, run instead:

mvn -Dtest=io.hotmoka.tests.WTSC2021 -DskipVerification=true test

The output should be something like:

running without on-chain verification
iteration 1/10 complete, the richest is 7d918604e0204e91b60fa0cadfefd0acbb407446d2e2c21da3910b6e37a95023#3ba
iteration 2/10 complete, the richest is 834b1905003dd355669e8fcbbb988918231aa5a29afc39410bc3551ae8132466#16c
iteration 3/10 complete, the richest is a3826ba81d7470bd3fa3462ac4db6e9b91bfef1a0eba9e65ede6cdab39467c3f#162
iteration 4/10 complete, the richest is 69079a2c6c331bed44c3a2878c91748c4c1db72aea4f3ae41c6dcf25cf25874d#316
iteration 5/10 complete, the richest is f05fa7ba14fba7476ea9977844fc25ea2849116dc68a58dd9958ca2ca10654f3#d8
iteration 6/10 complete, the richest is 1ad35a4e7593accaf732a6182cf567b586581eb9f601136cee9d430fd1e9fb06#88
iteration 7/10 complete, the richest is e43b585304b93d28e76d33328a23e3a9633bc8d98879687a87357c926035c84a#6c
iteration 8/10 complete, the richest is 6b013094e813fdd3d561a787871f97f40232ac0bb8af8ff7a6ea255877192599#2b6
iteration 9/10 complete, the richest is 99971df876f2ee14b06ba949f67cb397945f110564863c897bde1d1e8fb9f15e#1fa
iteration 10/10 complete, the richest is 940eca01785e0d2ea41b2383219a71c8d0d9961708de5475aafd717bc9f8d539#34
10000 money transfers, 10020 transactions in 155353 ms [64 tx/s]
